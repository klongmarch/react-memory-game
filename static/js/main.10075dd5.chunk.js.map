{"version":3,"sources":["CharacterCard.js","Wrapper.js","Navbar.js","Jumbotron.js","App.js","serviceWorker.js","index.js"],"names":["CharacterCard","props","className","Clicked","onClick","handleClick","id","alt","name","src","image","location","Wrapper","children","Navbar","currentScore","highScore","Jumbotron","App","state","characters","shuffleArray","handleScore","console","log","timesClicked","forEach","element","clicked","setState","handleIncrement","shuffledArr","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","this","map","character","key","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.10075dd5.chunk.js","sourcesContent":["import React from \"react\";\n \nfunction CharacterCard(props) {\n    return (\n        <div className={\"card \" + (props.Clicked ? \"animate\" : \"\")} onClick={() => props.handleClick( props.id)} >  \n            <div className=\"img-container\">\n                <img alt={props.name} src={props.image} />\n            </div>\n            <div className=\"img-content\">\n                <ul>\n                    <li>\n                        <strong>Name:</strong>{props.name}\n                    </li>\n                    <li>\n                        <strong>Location: </strong>{props.location}\n                    </li>\n                </ul>\n            </div>\n        </div >\n    )\n}\n \nexport default CharacterCard;\n","import React from \"react\";\n \nfunction Wrapper(props){\n    return <div className=\"wrapper\">{props.children}</div>\n}\n \nexport default Wrapper;\n","import React from \"react\";\n \nfunction Navbar(props) {\n    return (\n        <header className=\"container-fluid fixed-top\" >\n            <div className=\"row\">\n                <h1 className=\"col-sm-8\">Landscape Memory Game</h1>\n                <nav className=\"col-sm-4\">\n                    <p>Score: <span>{props.currentScore}</span></p>\n                    <p>Top Score: <span>{props.highScore}</span> </p>\n                    {props.children}\n                </nav>\n            </div>\n        </header>        \n    )\n}\n \nexport default Navbar;\n","import React from \"react\";\n \nfunction Jumbotron(props) {\n  return (\n    <div className=\"jumbotron jumbotron-fluid\">\n      <div className=\"container\">{props.children}\n        <p className=\"lead\">Get points by clicking on an image but don't click on any more than once!</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Jumbotron;\n","import React, { Component } from \"react\";\nimport CharacterCard from \"./CharacterCard\";\nimport Wrapper from \"./Wrapper\";\nimport Navbar from \"./Navbar\";\nimport Jumbotron from \"./Jumbotron\";\nimport characters from \"./characters.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    characters,\n    highScore: 0,\n    currentScore: 0,\n    Clicked: false\n  };\n\n  handleClick = id => {\n    this.shuffleArray();\n    this.handleScore(id);\n    console.log(this.state.timesClicked);\n  };\n\n  handleScore = id => {\n    this.state.characters.forEach(element => {\n      if (id === element.id && element.clicked === false) {\n        element.clicked = true;\n        this.setState({ Clicked: false });\n        this.handleIncrement();\n      } else if (id === element.id && element.clicked === true) {\n        if (this.state.currentScore > this.state.highScore) {\n          this.setState({ highScore: this.state.currentScore });\n        }\n        this.setState({ currentScore: 0 });\n        this.setState({ Clicked: true });\n        this.state.characters.forEach(element => (element.clicked = false));\n        console.log(this.state.characters);\n      }\n    });\n  };\n\n  shuffleArray = () => {\n    // Shuffle array of objects\n    const shuffledArr = this.shuffle(this.state.characters);\n    // Setting 'shuffledArr' as the new state\n    this.setState({ shuffledArr });\n  };\n\n  // handleIncrement increments this.state.currentScore by 1\n  handleIncrement = () => {\n    // Using setState method to update component's state\n    this.setState({ currentScore: this.state.currentScore + 1 });\n  };\n\n  // Function that takes an array as a parameter and shuffles it\n  shuffle = array => {\n    var currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Navbar\n          currentScore={this.state.currentScore}\n          highScore={this.state.highScore}\n        />\n        <Jumbotron />\n        {this.state.characters.map(character => (\n          <CharacterCard\n            Clicked={this.state.Clicked}\n            handleClick={this.handleClick}\n            id={character.id}\n            key={character.id}\n            name={character.name}\n            image={character.image}\n            location={character.location}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}